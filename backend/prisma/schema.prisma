generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String     @db.VarChar(255)
  lastName  String     @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  gender    String     @default("not selected") @db.VarChar(50)
  address   Json
  dob       String     @default("not selected") @db.VarChar(100)
  phone     String     @default("+251 911524856") @db.VarChar(20)
  cartData  Json       @default("{}") // Storing cart data as JSON
  feedbacks Feedback[] // One-to-many relationship with Feedback
  orders    Order[] // One-to-many relationship with Order
}

model Feedback {
  id      Int      @id @default(autoincrement())
  userId  Int
  comment String   @db.Text
  rating  Float    @db.Double
  date    DateTime @default(now())

  // Relation with User model
  user User @relation(fields: [userId], references: [id])
}

model Employee {
  id         Int      @id @default(autoincrement())
  firstName  String   @db.VarChar(255)
  lastName   String   @db.VarChar(255)
  gender     String   @db.VarChar(50)
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  image      String   @db.VarChar(255)
  phone      String   @db.VarChar(20)
  position   String   @db.VarChar(100)
  shift      String   @db.VarChar(100)
  education  String   @db.VarChar(255)
  experience String   @db.VarChar(255)
  salary     Float    @db.Float
  address    Json // Storing address as JSON for flexibility
  about      String   @db.Text
  date       DateTime @db.DateTime
}

model Food {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  price       Float
  image       String @db.VarChar(255)
  category    String @db.VarChar(255)
}

model Order {
  id            Int      @id @default(autoincrement())
  userId        Int
  items         Json
  amount        Float
  address       Json
  status        String   @default("Order Placed") @db.VarChar(255)
  paymentMethod String   @db.VarChar(255)
  payment       Boolean  @default(false)
  date          DateTime @default(now())

  // Relation with User model
  user User @relation(fields: [userId], references: [id])

  // Relation with Payment model (One-to-Many)
  payments Payment[]
}

model Inventory {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(255) // Name of the item
  category     String    @db.VarChar(100) // Category of the item (e.g., beverage, snack, dairy)
  quantity     Int       @default(0) // Current stock quantity
  dateReceived DateTime // Date item was received
  dateUpdated  DateTime  @updatedAt // Automatically updates when item is modified
  supplier     String?   @db.VarChar(255) // Supplier name, optional
  pricePerUnit Float? // Price per unit, optional for cost tracking
  expiryDate   DateTime? // Expiry date for perishable items, optional
  description  String?   @db.VarChar(500) // Optional description of the item
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float // Total amount of the payment
  method        String   @db.VarChar(255) // Payment method (e.g., Credit Card, Cash, PayPal)
  date          DateTime @default(now()) // Date and time of the payment
  status        String   @default("Pending") @db.VarChar(100) // Status of the payment (e.g., Pending, Completed)
  transactionId String?  @db.VarChar(255) // Optional transaction ID for tracking
  orderId       Int // Foreign key to associate payment with an order

  // Relation with Order model
  order Order @relation(fields: [orderId], references: [id])
}
