generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Employee model - Represents employees within the system
model employee {
  id                Int                 @id @default(autoincrement()) // Unique identifier for each employee
  firstName         String              @db.VarChar(255) // Employee's first name
  lastName          String              @db.VarChar(255) // Employee's last name
  gender            String              @db.VarChar(50) // Employee's gender
  email             String              @unique(map: "Employee_email_key") @db.VarChar(255) // Unique email address
  password          String              @db.VarChar(255) // Employee's password
  image             String              @db.VarChar(255) // URL or path to employee's profile image
  phone             String              @db.VarChar(20) // Employee's phone number
  position          String              @db.VarChar(100) // Job position or role
  shift             String              @db.VarChar(100) // Work shift or hours
  education         String              @db.VarChar(255) // Education details
  experience        String              @db.VarChar(255) // Work experience
  salary            Float               @db.Float // Employee's salary
  address           Json // Employee's address details in JSON format
  about             String              @db.Text // Additional information about the employee
  date              DateTime            @default(now()) // Date of record creation
  inventoryrequest  inventoryrequest[]
  inventoryPackage  inventoryPackage[]
  withdrawallog     withdrawallog[]
  inventorypurchase inventorypurchase[]
  workLogs          workLog[]
}

// workLog model - Tracks employee login and logout timestamps
model workLog {
  id         Int       @id @default(autoincrement()) // Unique identifier for each log entry
  employeeId Int // Foreign key to reference the employee
  loginTime  DateTime  @default(now()) // Timestamp for login
  logoutTime DateTime? // Nullable timestamp for logout (set when the employee logs out)

  // Define relationship with the employee model
  employee employee @relation(fields: [employeeId], references: [id])

  @@map("work_log") // Optional: Custom table name in the database
}

// Enum for account status
enum AccountStatus {
  ACTIVE
  BANNED
  DEACTIVATED
}

// User model - Represents customers or system users
model user {
  id                       Int             @id @default(autoincrement()) // Unique identifier for each user
  firstName                String          @db.VarChar(255) // User's first name
  lastName                 String?         @db.VarChar(255) // User's last name
  email                    String          @unique(map: "User_email_key") @db.VarChar(255) // Unique email address
  password                 String          @db.VarChar(255) // User's password
  gender                   String?         @default("not selected") @db.VarChar(50) // User's gender with default
  address                  Json? // User's address information in JSON format
  dob                      String?         @default("not selected") @db.VarChar(100) // Date of birth
  phone                    String?         @db.VarChar(15) // Adjusted length for E.164 format
  createdAt                DateTime        @default(now()) // Timestamp of record creation
  updatedAt                DateTime?       @updatedAt // Automatically updated timestamp for modifications
  lastUpdated              DateTime?       @updatedAt // Tracks last update timestamp
  cartData                 Json? // User's shopping cart data in JSON format
  passwordResetToken       String? // Nullable for non-reset cases
  passwordResetTokenExpiry DateTime? // Nullable for non-reset cases
  feedback                 feedback[] // Relation to feedback table
  order                    order[] // Relation to order table
  favorites                favorite[] // Relation to user's favorite food items
  customizations           customization[] // Relation to food customizations
  accountStatus            AccountStatus   @default(ACTIVE) // User's account status
  rating                   rating[]
}

// Food model - Represents food items
model food {
  id             Int             @id @default(autoincrement()) // Unique identifier for each food item
  name           String          @unique @db.VarChar(255) // Name of the food item
  description    String          @db.Text // Description of the food item
  price          Float // Price of the food item
  image          String          @db.VarChar(255) // URL or path to food item image
  category       String          @db.VarChar(255) // Category of the food item (e.g., appetizer, dessert)
  menuStatus     Boolean         @default(true) // Indicates if the item is available on the menu
  prepTime       Int             @default(0) // Preparation time in minutes
  rating         Float?          @default(0.0) // Average rating of the food item
  isFasting      Boolean         @default(false) // Indicates if the food is fasting or non-fasting
  createdAt      DateTime        @default(now()) // Timestamp of record creation
  lastUpdated    DateTime?       @updatedAt // Tracks last update timestamp
  orderItem      orderItem[]
  favorites      favorite[] // Relation to favorites table
  customizations customization[] // Relation to customizations table
  ratings        rating[] // Relation to ratings table
}

model Drink {
  drink_Id          Int       @id @default(autoincrement()) // Unique identifier
  drink_Name        String    @unique @db.VarChar(255) // Name of the drink
  drink_Description String    @db.VarChar(255) // Description
  drink_Price       Float // Price
  drink_Image       String    @db.VarChar(255) // URL or path to drink image
  drink_Category    String    @db.VarChar(255) // Category (e.g., soda, juice, alcoholic)
  is_Alcoholic      Boolean   @default(false) // Indicates if the drink contains alcohol
  drink_Size        String?   @db.VarChar(50) // Size of the drink (e.g., small, medium, large)
  menu_Status       Boolean   @default(true) // Availability on the menu
  average_Rating    Float?    @default(0.0) // Average rating
  created_At        DateTime  @default(now()) // Creation timestamp
  last_Updated      DateTime? @updatedAt // Last update timestamp

  order_Items    orderItem[] // Relation to order items
  favorites      favorite[] // Relation to favorites
  customizations customization[] // Relation to customizations
  ratings        rating[] // Relation to ratings
}

// Rating model - Represents user ratings for food items
model rating {
  id        Int      @id @default(autoincrement())
  userId    Int
  foodId    Int?
  rating    Float
  createdAt DateTime @default(now())

  user    user   @relation(fields: [userId], references: [id])
  food    food?  @relation(fields: [foodId], references: [id])
  Drink   Drink? @relation(fields: [drinkId], references: [drink_Id])
  drinkId Int?

  @@unique([userId, foodId], map: "Unique_user_food_rating") // Ensure one rating per user-food combination
}

// Favorite model - Represents user's favorite food items
model favorite {
  id          Int       @id @default(autoincrement()) // Unique identifier for each favorite entry
  userId      Int // Foreign key to User table
  foodId      Int? // Foreign key to Food table
  drinkId     Int? // Foreign key to Drink table
  addedAt     DateTime  @default(now()) // Date when the item was marked as favorite
  lastUpdated DateTime? @updatedAt // Tracks last update timestamp

  user  user   @relation(fields: [userId], references: [id], map: "Favorite_userId_fkey")
  food  food?  @relation(fields: [foodId], references: [id], map: "Favorite_foodId_fkey")
  Drink Drink? @relation(fields: [drinkId], references: [drink_Id], map: "Favorite_drinkId_fkey") // Fixed relation mapping

  // Removed the unique constraint that conflicts with allowing the same foodId and drinkId
  @@unique([userId, foodId, drinkId], map: "Unique_user_food_drink_favorite")
}

// Customization model - Represents user's customizations for food items
model customization {
  id          Int       @id @default(autoincrement()) // Unique identifier for each customization entry
  userId      Int // Foreign key to User table
  foodId      Int? // Foreign key to Food table
  customNote  String    @db.VarChar(255) // Note describing the customization (e.g., "No pickles", "Extra cheese")
  createdAt   DateTime  @default(now()) // Date when customization was added
  lastUpdated DateTime? @updatedAt // Tracks last update timestamp

  user    user   @relation(fields: [userId], references: [id], map: "Customization_userId_fkey")
  food    food?  @relation(fields: [foodId], references: [id], map: "Customization_foodId_fkey")
  Drink   Drink? @relation(fields: [drinkId], references: [drink_Id])
  drinkId Int?

  @@index([userId], map: "Customization_userId_fkey")
  @@index([foodId], map: "Customization_foodId_fkey")
}

// Feedback model - Represents user feedback
model feedback {
  id          Int       @id @default(autoincrement()) // Unique identifier for each feedback
  userId      Int // Foreign key to User table
  comment     String    @db.Text // User's feedback comment
  rating      Float // User's rating
  date        DateTime  @default(now()) // Date when feedback was given
  lastUpdated DateTime? @updatedAt // Tracks last update timestamp

  user user @relation(fields: [userId], references: [id], map: "Feedback_userId_fkey")

  @@index([userId], map: "Feedback_userId_fkey")
}

// Order model - Represents user orders
model order {
  id                      Int       @id @default(autoincrement()) // Unique identifier for each order
  userId                  Int // Foreign key to User table
  items                   Json // List of items in the order (stored as JSON)
  amount                  Float // Total amount of the order
  address                 Json // Delivery address for the order (stored as JSON)
  status                  String    @default("Order Placed") @db.VarChar(255) // Order status
  paymentMethod           String    @db.VarChar(255) // Payment method used for the order
  isPaid                  Boolean   @default(false) // Indicates if payment is completed
  priority                String    @default("Normal") @db.VarChar(50) // Priority of the order ("Normal", "High", "Urgent")
  date                    DateTime  @default(now()) // Date when the order was placed
  totalPrepTime           Int       @default(0) // Preparation time in minutes
  estimatedCompletionTime DateTime? // Calculated completion time for the order
  chefId                  Int? // Foreign key to Employee (Chef) table

  user      user        @relation(fields: [userId], references: [id], map: "Order_userId_fkey")
  payment   payment[] // Relation to payment table
  orderItem orderItem[]
  orderLog  orderLog[]

  @@index([userId], map: "Order_userId_fkey")
}

model orderItem {
  id            Int       @id @default(autoincrement())
  orderId       Int // Foreign key to the order table
  foodId        Int? // Foreign key to the food table
  quantity      Int // Quantity of the food item
  price         Float // Price of the food item at the time of order
  cookingStatus String    @default("Not Started") // Cooking status of the item
  startedAt     DateTime? // When cooking started
  completedAt   DateTime? // When cooking was completed

  order   order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  food    food?  @relation(fields: [foodId], references: [id], onDelete: Cascade)
  Drink   Drink? @relation(fields: [drinkId], references: [drink_Id])
  drinkId Int?
}

// Payment model - Represents order payments
model payment {
  id            Int      @id @default(autoincrement()) // Unique identifier for each payment
  amount        Float // Payment amount before discounts and taxes
  discount      Float    @default(0) // Discount applied to the order
  tax           Float    @default(0) // Tax applied to the order
  totalAmount   Float // Final amount after tax and discount
  method        String   @db.VarChar(255) // Payment method (e.g., card, cash)
  date          DateTime @default(now()) // Date when the payment was made
  status        String   @default("Pending") @db.VarChar(100) // Payment status
  transactionId String?  @db.VarChar(255) // Optional transaction ID
  orderId       Int // Foreign key to Order table

  order order @relation(fields: [orderId], references: [id], map: "Payment_orderId_fkey")

  @@index([orderId], map: "Payment_orderId_fkey")
}

// New OrderLog model for activity logging
model orderLog {
  id         Int      @id @default(autoincrement()) // Unique identifier for each log entry
  orderId    Int // Foreign key to the Order table
  status     String   @db.VarChar(255) // Status change (e.g., "Order Placed", "Cooking", "Completed")
  updatedBy  String   @db.VarChar(255) // The person or system making the change
  changeTime DateTime @default(now()) // Timestamp of the change
  comments   String?  @db.Text // Optional comments or additional details

  order order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "OrderLog_orderId_fkey")
}

model inventory {
  id              Int       @id @default(autoincrement()) // Unique identifier for each inventory item
  name            String    @unique @db.VarChar(255) // Name of the inventory item
  category        String    @db.VarChar(100) // Category of the inventory item
  description     String?   @db.VarChar(500) // Optional description
  quantity        Int       @default(0) // Current quantity
  unit            String    @db.VarChar(50) // Unit of measurement
  pricePerUnit    Float? // Price per unit
  status          String?   @db.VarChar(50) // Optional status
  dateReceived    DateTime  @default(now()) // Date received
  dateUpdated     DateTime  @default(now()) @updatedAt // Date last updated
  expiryDate      DateTime? // Optional expiry date
  image           String?   @db.VarChar(255) // Optional image
  initialQuantity Int?      @default(0) // Initial quantity
  supplierId      Int? // Foreign key to supplier
  supplier        supplier? @relation(fields: [supplierId], references: [id], map: "Inventory_supplierId_fkey") // Relation to Supplier

  inventorypurchase inventorypurchase[] // Relation to inventory purchases
  inventoryrequest  inventoryrequest[] // Relation to inventory requests
  supplierorder     supplierorder[] // Relation to supplier orders
  withdrawallog     withdrawallog[] // Relation to withdrawal logs
  inventorySupplier inventorySupplier[]
  StockBatch        StockBatch[]
}

model withdrawallog {
  id               Int                @id @default(autoincrement()) // Unique identifier for each withdrawal log
  inventoryId      Int // Foreign key to Inventory table
  employeeId       Int? // Foreign key to Employee table (optional to allow SetNull)
  reason           String? // Reason for withdrawal
  quantity         Int // Quantity withdrawn
  dateWithdrawn    DateTime           @default(now()) // Date when the item was withdrawn
  inventory        inventory          @relation(fields: [inventoryId], references: [id], onDelete: Cascade) // Relationship with Inventory
  employee         employee?          @relation(fields: [employeeId], references: [id], onDelete: SetNull) // Link to Employee who made the withdrawal
  inventoryrequest inventoryrequest[]

  @@index([inventoryId], map: "WithdrawalLog_inventoryId_fkey")
  @@index([employeeId], map: "WithdrawalLog_employeeId_fkey")
}

model inventorypurchase {
  id             Int       @id @default(autoincrement())
  inventoryId    Int // Foreign key to Inventory table
  employeeId     Int? // Foreign key to Employee table (optional to allow SetNull)
  purchaseDate   DateTime  @default(now()) // Date the stock was purchased
  quantityBought Int // Quantity purchased in this transaction
  supplierId     Int? // Temporarily make this optional
  cost           Float? // Total cost of the purchase
  pricePerUnit   Float? // Cost per unit for this batch
  inventory      inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  supplier       supplier? @relation(fields: [supplierId], references: [id])
  employee       employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull) // Link to Employee who made the purchase

  @@index([inventoryId], map: "InventoryPurchase_inventoryId_fkey")
  @@index([employeeId], map: "InventoryPurchase_employeeId_fkey")
}

model StockBatch {
  id                Int       @id @default(autoincrement())
  batchNumber       String    @unique @db.VarChar(50) // Unique identifier for the batch
  inventoryId       Int // Foreign key to Inventory
  supplierId        Int? // Foreign key to Supplier
  purchaseDate      DateTime  @default(now()) // Date the stock was purchased
  quantityBought    Int // Total quantity purchased in this batch
  pricePerUnit      Float // Cost per unit for this batch
  expiryDate        DateTime? // Optional expiry date for this batch
  quantityRemaining Int // Quantity left in this batch
  inventory         inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade) // Link to Inventory
  supplier          supplier? @relation(fields: [supplierId], references: [id]) // Link to Supplier

  @@index([inventoryId], map: "StockBatch_inventoryId_fkey")
}

model supplierorder {
  id              Int       @id @default(autoincrement())
  inventoryId     Int
  quantityOrdered Int
  orderDate       DateTime  @default(now())
  supplierId      Int // Temporarily make this optional
  status          String
  packageId       Int? // Foreign key to Inventory Package table
  inventory       inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  supplier        supplier? @relation(fields: [supplierId], references: [id])
}

model inventoryrequest {
  id              Int      @id @default(autoincrement()) // Unique identifier for each request
  inventoryId     Int // Foreign key to Inventory table
  employeeId      Int // Foreign key to Employee table
  withdrawalLogId Int? // Foreign key to WithdrawalLog table (optional)
  quantity        Int // Quantity requested
  dateRequested   DateTime @default(now()) // Date of request
  status          String   @db.VarChar(50) // Status of the request

  inventory          inventory         @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  employee           employee          @relation(fields: [employeeId], references: [id], map: "InventoryRequest_employeeId_fkey")
  withdrawalLog      withdrawallog?    @relation(fields: [withdrawalLogId], references: [id], map: "InventoryRequest_withdrawalLogId_fkey") // Optional relation
  inventoryPackage   inventoryPackage? @relation(fields: [inventoryPackageId], references: [id])
  inventoryPackageId Int?

  @@index([inventoryId], map: "InventoryRequest_inventoryId_fkey")
  @@index([employeeId], map: "InventoryRequest_employeeId_fkey")
  @@index([withdrawalLogId], map: "InventoryRequest_withdrawalLogId_fkey")
}

// Supplier model - Represents suppliers
model supplier {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  email             String?             @unique // Add unique email field
  contactInfo       Json
  status            String              @default("active") @db.VarChar(50)
  products          inventorySupplier[]
  inventoryPackages inventoryPackage[]
  dateAdded         DateTime            @default(now())
  inventory         inventory[]
  inventorypurchase inventorypurchase[]
  supplierorder     supplierorder[]
  StockBatch        StockBatch[]
}

model inventorySupplier {
  id           Int      @id @default(autoincrement()) // Unique identifier for the mapping
  inventoryId  Int // Foreign key to Inventory table
  supplierId   Int // Foreign key to Supplier table
  pricePerUnit Float? // Price per unit offered by the supplier for the inventory item
  payment      String?  @db.VarChar(255) // Payment terms or conditions
  dateAdded    DateTime @default(now()) // Date when the supplier was linked to the inventory

  // Relationships
  inventory inventory @relation(fields: [inventoryId], references: [id], map: "InventorySupplier_inventoryId_fkey")
  supplier  supplier  @relation(fields: [supplierId], references: [id], map: "InventorySupplier_supplierId_fkey")

  // Composite Index to ensure unique supplier-inventory mapping
  @@unique([inventoryId, supplierId], map: "Unique_Inventory_Supplier")
}

// Inventory Package model - Tracks inventory packages
model inventoryPackage {
  id               Int                @id @default(autoincrement()) // Unique identifier for each package
  name             String             @db.VarChar(255) // Package name
  description      String?            @db.Text // Optional package description
  supplierId       Int? // Foreign key to Supplier table (nullable)
  chefId           Int? // Foreign key to Employee table (nullable)
  packageType      String             @default("Order") @db.VarChar(50) // Type of the package (e.g., "Order" or "Request")
  status           String             @default("Pending") @db.VarChar(50) // Status of the package
  dateAdded        DateTime           @default(now()) // Date when the package was created
  totalCost        Float? // Total cost of the package (sum of all items)
  items            Json? // Array of items with inventoryId, quantity, pricePerUnit, etc.
  supplier         supplier?          @relation(fields: [supplierId], references: [id], map: "InventoryPackage_supplierId_fkey") // Optional relationship with Supplier
  chef             employee?          @relation(fields: [chefId], references: [id], map: "InventoryPackage_chefId_fkey") // Optional relationship with Employee (Chef)
  inventoryrequest inventoryrequest[] // Reverse relation to inventoryRequest

  @@index([supplierId], map: "InventoryPackage_supplierId_fkey")
  @@index([chefId], map: "InventoryPackage_chefId_fkey") // Index for chefId
}
