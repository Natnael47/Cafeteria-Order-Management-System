generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model employee {
  id         Int      @id @default(autoincrement())
  firstName  String   @db.VarChar(255)
  lastName   String   @db.VarChar(255)
  gender     String   @db.VarChar(50)
  email      String   @unique(map: "Employee_email_key") @db.VarChar(255)
  password   String   @db.VarChar(255)
  image      String   @db.VarChar(255)
  phone      String   @db.VarChar(20)
  position   String   @db.VarChar(100)
  shift      String   @db.VarChar(100)
  education  String   @db.VarChar(255)
  experience String   @db.VarChar(255)
  salary     Float    @db.Float
  address    Json
  about      String   @db.Text
  date       DateTime @default(now())
}

model feedback {
  id      Int      @id @default(autoincrement())
  userId  Int
  comment String   @db.Text
  rating  Float
  date    DateTime @default(now())
  user    user     @relation(fields: [userId], references: [id], map: "Feedback_userId_fkey")

  @@index([userId], map: "Feedback_userId_fkey")
}

model food {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String  @db.VarChar(255)
  price       Float
  image       String  @db.VarChar(255)
  category    String  @db.VarChar(255)
  menuStatus  Boolean @default(true)
}

model inventory {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  category          String              @db.VarChar(100)
  description       String?             @db.VarChar(500)
  quantity          Int                 @default(0)
  unit              String              @db.VarChar(50)
  pricePerUnit      Float?
  status            String?             @db.VarChar(50)
  dateReceived      DateTime
  dateUpdated       DateTime
  supplier          String?             @db.VarChar(255)
  expiryDate        DateTime?
  image             String?             @db.VarChar(255)
  initialQuantity   Int?                @default(0)
  inventorypurchase inventorypurchase[]
  inventoryrequest  inventoryrequest[]
  supplierorder     supplierorder[]
  withdrawallog     withdrawallog[]
}

model inventorypurchase {
  id             Int       @id @default(autoincrement())
  inventoryId    Int
  purchaseDate   DateTime  @default(now())
  quantityBought Int
  supplier       String?
  cost           Float?
  pricePerUnit   Float?
  inventory      inventory @relation(fields: [inventoryId], references: [id], map: "InventoryPurchase_inventoryId_fkey")

  @@index([inventoryId], map: "InventoryPurchase_inventoryId_fkey")
}

model inventoryrequest {
  id            Int       @id @default(autoincrement())
  inventoryId   Int
  requestedBy   String
  quantity      Int
  dateRequested DateTime  @default(now())
  status        String    @db.VarChar(50)
  inventory     inventory @relation(fields: [inventoryId], references: [id], map: "InventoryRequest_inventoryId_fkey")

  @@index([inventoryId], map: "InventoryRequest_inventoryId_fkey")
}

model order {
  id            Int       @id @default(autoincrement())
  userId        Int
  items         Json
  amount        Float
  address       Json
  status        String    @default("Order Placed") @db.VarChar(255)
  paymentMethod String    @db.VarChar(255)
  payment       Boolean   @default(false)
  date          DateTime  @default(now())
  user          user      @relation(fields: [userId], references: [id], map: "Order_userId_fkey")
  payment       payment[]

  @@index([userId], map: "Order_userId_fkey")
}

model payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  method        String   @db.VarChar(255)
  date          DateTime @default(now())
  status        String   @default("Pending") @db.VarChar(100)
  transactionId String?  @db.VarChar(255)
  orderId       Int
  order         order    @relation(fields: [orderId], references: [id], map: "Payment_orderId_fkey")

  @@index([orderId], map: "Payment_orderId_fkey")
}

model supplierorder {
  id              Int       @id @default(autoincrement())
  inventoryId     Int
  quantityOrdered Int
  orderDate       DateTime  @default(now())
  supplier        String?
  status          String    @db.VarChar(50)
  inventory       inventory @relation(fields: [inventoryId], references: [id], map: "SupplierOrder_inventoryId_fkey")

  @@index([inventoryId], map: "SupplierOrder_inventoryId_fkey")
}

model user {
  id        Int        @id @default(autoincrement())
  firstName String     @db.VarChar(255)
  lastName  String     @db.VarChar(255)
  email     String     @unique(map: "User_email_key") @db.VarChar(255)
  password  String     @db.VarChar(255)
  gender    String     @default("not selected") @db.VarChar(50)
  address   Json
  dob       String     @default("not selected") @db.VarChar(100)
  phone     String     @default("+251 911524856") @db.VarChar(20)
  cartData  Json
  feedback  feedback[]
  order     order[]
}

model withdrawallog {
  id            Int       @id @default(autoincrement())
  inventoryId   Int
  withdrawnBy   String
  quantity      Int
  dateWithdrawn DateTime  @default(now())
  inventory     inventory @relation(fields: [inventoryId], references: [id], map: "WithdrawalLog_inventoryId_fkey")

  @@index([inventoryId], map: "WithdrawalLog_inventoryId_fkey")
}
