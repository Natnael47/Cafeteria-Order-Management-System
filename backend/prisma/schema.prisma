generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Employee model - Represents employees within the system
model employee {
  id               Int                @id @default(autoincrement()) // Unique identifier for each employee
  firstName        String             @db.VarChar(255) // Employee's first name
  lastName         String             @db.VarChar(255) // Employee's last name
  gender           String             @db.VarChar(50) // Employee's gender
  email            String             @unique(map: "Employee_email_key") @db.VarChar(255) // Unique email address
  password         String             @db.VarChar(255) // Employee's password
  image            String             @db.VarChar(255) // URL or path to employee's profile image
  phone            String             @db.VarChar(20) // Employee's phone number
  position         String             @db.VarChar(100) // Job position or role
  shift            String             @db.VarChar(100) // Work shift or hours
  education        String             @db.VarChar(255) // Education details
  experience       String             @db.VarChar(255) // Work experience
  salary           Float              @db.Float // Employee's salary
  address          Json // Employee's address details in JSON format
  about            String             @db.Text // Additional information about the employee
  date             DateTime           @default(now()) // Date of record creation
  inventoryrequest inventoryrequest[]
}

// User model - Represents customers or system users
model user {
  id        Int        @id @default(autoincrement()) // Unique identifier for each user
  firstName String     @db.VarChar(255) // User's first name
  lastName  String     @db.VarChar(255) // User's last name
  email     String     @unique(map: "User_email_key") @db.VarChar(255) // Unique email address
  password  String     @db.VarChar(255) // User's password
  gender    String     @default("not selected") @db.VarChar(50) // User's gender with default
  address   Json // User's address information in JSON format
  dob       String     @default("not selected") @db.VarChar(100) // Date of birth
  phone     String     @default("+251 911524856") @db.VarChar(20) // User's phone number
  cartData  Json // User's shopping cart data in JSON format
  feedback  feedback[] // Relation to feedback table
  order     order[] // Relation to order table
}

// Feedback model - Represents user feedback
model feedback {
  id      Int      @id @default(autoincrement()) // Unique identifier for each feedback
  userId  Int // Foreign key to User table
  comment String   @db.Text // User's feedback comment
  rating  Float // User's rating
  date    DateTime @default(now()) // Date when feedback was given
  user    user     @relation(fields: [userId], references: [id], map: "Feedback_userId_fkey")

  @@index([userId], map: "Feedback_userId_fkey")
}

// Order model - Represents user orders
model order {
  id            Int       @id @default(autoincrement()) // Unique identifier for each order
  userId        Int // Foreign key to User table
  items         Json // List of items in the order (stored as JSON)
  amount        Float // Total amount of the order
  address       Json // Delivery address for the order (stored as JSON)
  status        String    @default("Order Placed") @db.VarChar(255) // Order status
  paymentMethod String    @db.VarChar(255) // Payment method used for the order
  isPaid        Boolean   @default(false) // Indicates if payment is completed
  date          DateTime  @default(now()) // Date when the order was placed
  user          user      @relation(fields: [userId], references: [id], map: "Order_userId_fkey")
  payment       payment[] // Relation to payment table

  @@index([userId], map: "Order_userId_fkey")
}

// Payment model - Represents order payments
model payment {
  id            Int      @id @default(autoincrement()) // Unique identifier for each payment
  amount        Float // Payment amount
  method        String   @db.VarChar(255) // Payment method (e.g., card, cash)
  date          DateTime @default(now()) // Date when the payment was made
  status        String   @default("Pending") @db.VarChar(100) // Payment status
  transactionId String?  @db.VarChar(255) // Optional transaction ID
  orderId       Int // Foreign key to Order table
  order         order    @relation(fields: [orderId], references: [id], map: "Payment_orderId_fkey")

  @@index([orderId], map: "Payment_orderId_fkey")
}

// Food model - Represents food items
model food {
  id          Int     @id @default(autoincrement()) // Unique identifier for each food item
  name        String  @db.VarChar(255) // Name of the food item
  description String  @db.VarChar(255) // Description of the food item
  price       Float // Price of the food item
  image       String  @db.VarChar(255) // URL or path to food item image
  category    String  @db.VarChar(255) // Category of the food item (e.g., appetizer, dessert)
  menuStatus  Boolean @default(true) // Indicates if the item is available on the menu
}

// Inventory model - Represents inventory items
model inventory {
  id              Int       @id @default(autoincrement()) // Unique identifier for each inventory item
  name            String    @db.VarChar(255) // Name of the inventory item
  category        String    @db.VarChar(100) // Category of the inventory item
  description     String?   @db.VarChar(500) // Optional description of the inventory item
  quantity        Int       @default(0) // Current quantity available
  unit            String    @db.VarChar(50) // Unit of measurement for the item
  pricePerUnit    Float? // Optional price per unit
  status          String?   @db.VarChar(50) // Optional status of the inventory item
  dateReceived    DateTime  @default(now()) // Date when the item was received
  dateUpdated     DateTime  @default(now()) @updatedAt // Date when the item was last updated
  expiryDate      DateTime? // Optional expiry date of the item
  image           String?   @db.VarChar(255) // Optional image of the inventory item
  initialQuantity Int?      @default(0) // Initial quantity when received
  supplier        String?   @db.VarChar(255) // Optional supplier name

  inventorypurchase inventorypurchase[] // Relation to inventory purchases
  inventoryrequest  inventoryrequest[] // Relation to inventory requests
  supplierorder     supplierorder[] // Relation to supplier orders
  withdrawallog     withdrawallog[] // Relation to withdrawal logs
  packageInventory  packageInventory[] // Relation to inventory packages
  suppliers         inventorySupplier[] // Relation to the junction table for supplier-inventory mapping

  @@index([id])
}

// Inventory Purchase model - Tracks inventory purchases
model inventorypurchase {
  id             Int       @id @default(autoincrement()) // Unique identifier for each purchase
  inventoryId    Int // Foreign key to Inventory table
  purchaseDate   DateTime  @default(now()) // Date when the purchase was made
  quantityBought Int // Quantity bought
  supplier       String? // Optional supplier name
  cost           Float? // Optional cost of the purchase
  pricePerUnit   Float? // Optional price per unit
  inventory      inventory @relation(fields: [inventoryId], references: [id], map: "InventoryPurchase_inventoryId_fkey") // Relationship with Inventory

  @@index([inventoryId], map: "InventoryPurchase_inventoryId_fkey")
}

// Inventory Request model - Tracks inventory requests made by employees
model inventoryrequest {
  id            Int       @id @default(autoincrement()) // Unique identifier for each request
  inventoryId   Int // Foreign key to Inventory table
  employeeId    Int // Foreign key to Employee table
  quantity      Int // Quantity requested
  dateRequested DateTime  @default(now()) // Date of request
  status        String    @db.VarChar(50) // Status of the request
  inventory     inventory @relation(fields: [inventoryId], references: [id], map: "InventoryRequest_inventoryId_fkey") // Relationship with Inventory
  employee      employee  @relation(fields: [employeeId], references: [id], map: "InventoryRequest_employeeId_fkey") // Relationship with Employee

  @@index([inventoryId], map: "InventoryRequest_inventoryId_fkey")
  @@index([employeeId], map: "InventoryRequest_employeeId_fkey") // Index for employeeId
}

// Supplier model - Represents suppliers
model supplier {
  id                Int                 @id @default(autoincrement()) // Unique identifier for each supplier
  name              String              @db.VarChar(255) // Name of the supplier
  contactInfo       Json // Contact information for the supplier (e.g., phone, email, address)
  status            String              @default("active") @db.VarChar(50) // Supplier status: active or inactive
  products          inventorySupplier[] // Relation to the junction table for supplier-inventory mapping
  inventoryPackages inventoryPackage[] // Relation to inventory packages
  dateAdded         DateTime            @default(now()) // Date when the supplier was added
}

model inventorySupplier {
  id           Int      @id @default(autoincrement()) // Unique identifier for the mapping
  inventoryId  Int // Foreign key to Inventory table
  supplierId   Int // Foreign key to Supplier table
  pricePerUnit Float? // Price per unit offered by the supplier for the inventory item
  payment      String?  @db.VarChar(255) // Payment terms or conditions
  dateAdded    DateTime @default(now()) // Date when the supplier was linked to the inventory

  // Relationships
  inventory inventory @relation(fields: [inventoryId], references: [id], map: "InventorySupplier_inventoryId_fkey")
  supplier  supplier  @relation(fields: [supplierId], references: [id], map: "InventorySupplier_supplierId_fkey")

  // Composite Index to ensure unique supplier-inventory mapping
  @@unique([inventoryId, supplierId], map: "Unique_Inventory_Supplier")
}

// Supplier Order model - Tracks supplier orders
model supplierorder {
  id              Int       @id @default(autoincrement()) // Unique identifier for each supplier order
  inventoryId     Int // Foreign key to Inventory table
  quantityOrdered Int // Quantity ordered
  orderDate       DateTime  @default(now()) // Date when the order was placed
  supplier        String? // Optional supplier name
  status          String    @db.VarChar(50) // Status of the supplier order
  inventory       inventory @relation(fields: [inventoryId], references: [id], map: "SupplierOrder_inventoryId_fkey") // Relationship with Inventory

  @@index([inventoryId], map: "SupplierOrder_inventoryId_fkey")
}

// Withdrawal Log model - Tracks inventory withdrawals
model withdrawallog {
  id            Int       @id @default(autoincrement()) // Unique identifier for each withdrawal log
  inventoryId   Int // Foreign key to Inventory table
  withdrawnBy   String // Name of the person withdrawing the item
  quantity      Int // Quantity withdrawn
  dateWithdrawn DateTime  @default(now()) // Date when the item was withdrawn
  inventory     inventory @relation(fields: [inventoryId], references: [id], map: "WithdrawalLog_inventoryId_fkey") // Relationship with Inventory

  @@index([inventoryId], map: "WithdrawalLog_inventoryId_fkey")
}

// Package Inventory model - Tracks package items
model packageInventory {
  id               Int              @id @default(autoincrement()) // Unique identifier for each package inventory item
  packageId        Int // Foreign key to Inventory Package table
  inventoryId      Int // Foreign key to Inventory table
  quantity         Int // Quantity of the item in the package
  pricePerUnit     Float // Price per unit at the time of purchase
  totalCost        Float // Total cost for the item (quantity * pricePerUnit)
  inventory        inventory        @relation(fields: [inventoryId], references: [id], map: "PackageInventory_inventoryId_fkey") // Relationship with Inventory
  inventoryPackage inventoryPackage @relation(fields: [packageId], references: [id], map: "PackageInventory_packageId_fkey") // Relationship with Inventory Package

  @@index([packageId], map: "PackageInventory_packageId_fkey")
  @@index([inventoryId], map: "PackageInventory_inventoryId_fkey")
}

// Inventory Package model - Tracks inventory packages
model inventoryPackage {
  id               Int                @id @default(autoincrement()) // Unique identifier for each package
  name             String             @db.VarChar(255) // Package name
  description      String?            @db.Text // Optional package description
  supplierId       Int // Foreign key to Supplier table
  status           String             @default("Pending") @db.VarChar(50) // Status of the package
  dateAdded        DateTime           @default(now()) // Date when the package was created
  totalCost        Float? // Total cost of the package (sum of all items)
  supplier         supplier           @relation(fields: [supplierId], references: [id], map: "InventoryPackage_supplierId_fkey") // Relationship with Supplier
  packageInventory packageInventory[] // Relation to Package Inventory items

  @@index([supplierId], map: "InventoryPackage_supplierId_fkey")
}
